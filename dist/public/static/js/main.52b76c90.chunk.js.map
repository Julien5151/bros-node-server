{"version":3,"sources":["assets/images/logo.svg","services/api.service.ts","utils/constants.ts","components/Login/Login.tsx","components/Profile/Profile.tsx","services/data-formatting.service.ts","components/Register/Register.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApiService","endpoint","body","fetch","this","BASE_URL","method","mode","headers","JSON","stringify","response","handleResponse","status","json","Login","props","useState","error","errorText","value","emailControl","setEmailControl","passwordControl","setPasswordControl","history","useHistory","handleFieldChange","useCallback","event","updateStateFunction","target","signIn","a","post","email","password","push","PROFILE_ROUTE","console","className","Card","CardContent","src","logo","alt","autoComplete","TextField","onChange","helperText","label","variant","type","CardActions","Button","onClick","disabled","color","Profile","DataFormatting","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","string","from","c","charCodeAt","Register","open","setOpen","handleClose","reason","register","credentialCreationOptions","publicKeyCredentialCreationOptions","challenge","stringToUInt8ArrayBuffer","user","id","navigator","credentials","create","publicKey","signupRequestBody","publicKeyCredential","rawId","arrayBufferToBase64","attestationObject","clientDataJSON","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAAe,G,MAAA,IAA0B,kC,gBCE5BA,EAAb,gIAII,WAAkBC,EAAkBC,GAApC,uFAE2BC,MAAMC,KAAKC,SAAWJ,EAAU,CACnDK,OAAQ,OACRC,KAAM,OACNC,QAAS,CACL,eAAgB,oBAEpBN,KAAMO,KAAKC,UAAUR,KAR7B,cAEUS,EAFV,yBAUWP,KAAKQ,eAAeD,IAV/B,gDAJJ,4HAiBI,WAA4BA,GAA5B,sEAEQA,EAASE,QAAU,KAF3B,gCAGoBF,EAASG,OAH7B,2CAMqBH,EAASG,OAN9B,mFAjBJ,8DAAad,EAEFK,SCHwB,sC,mBCQ5B,SAASU,EAAMC,GAClB,MAAwCC,mBAAS,CAAEC,OAAO,EAAOC,UAAW,KAAMC,MAAO,OAAzF,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8CL,mBAAS,CAAEC,OAAO,EAAOC,UAAW,KAAMC,MAAO,OAA/F,mBAAOG,EAAP,KAAwBC,EAAxB,KACMC,EAAUC,cAEVC,EAAoBC,uBAAY,SAACC,EAA2BC,GACzDD,EAAME,OAAOX,MAGdU,EAAoB,CAAEZ,OAAO,EAAOC,UAAW,KAAMC,MAAOS,EAAME,OAAOX,QAFzEU,EAAoB,CAAEZ,OAAO,EAAMC,UAAW,WAAYC,MAAO,SAItE,IAEGY,EAASJ,sBAAW,sBAAC,sBAAAK,EAAA,+EAEbjC,EAAWkC,KAAK,eAAgB,CAClCC,MAAOd,EAAaD,MACpBgB,SAAUb,EAAgBH,QAJX,OAOnBK,EAAQY,KAAKC,GAPM,+CASnBC,QAAQrB,MAAR,MATmB,wDAWxB,CAACG,EAAaD,MAAOG,EAAgBH,MAAOK,IAE/C,OACI,qBAAKe,UAAU,kBAAf,SACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,qBAAKF,UAAU,eAAf,SACI,qBAAKG,IAAKC,EAAMC,IAAI,0BAExB,uBAAMC,aAAa,MAAnB,UACI,cAACC,EAAA,EAAD,CACIC,SAAU,SAACnB,GAAD,OAA+BF,EAAkBE,EAAOP,IAClEJ,MAAOG,EAAaH,MACpB+B,WAAY5B,EAAaF,UACzB+B,MAAM,QACNC,QAAQ,aAEZ,cAACJ,EAAA,EAAD,CACIC,SAAU,SAACnB,GAAD,OAA+BF,EAAkBE,EAAOL,IAClE4B,KAAK,WACLlC,MAAOK,EAAgBL,MACvB+B,WAAY1B,EAAgBJ,UAC5B+B,MAAM,WACNC,QAAQ,mBAIpB,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,QAASvB,EACTwB,SAAUnC,EAAaH,OAASK,EAAgBL,MAChDiC,QAAQ,YACRM,MAAM,UAJV,4B,kBC1Db,SAASC,EAAQ1C,GACpB,OACI,qBAAKwB,UAAU,oBAAf,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,wD,qBCRPiB,G,MAAb,wGAII,SAA2BC,GAKvB,IAJA,IAAIC,EAAS,GAETC,EAAQ,IAAIC,WAAWH,GACvBI,EAAMF,EAAMG,WACPC,EAAI,EAAGA,EAAIF,EAAKE,IAErBL,GAAUM,OAAOC,aAAaN,EAAMI,IAGxC,OAAOG,OAAOC,KAAKT,KAd3B,sCAoBI,SAAgCU,GAC5B,OAAOR,WAAWS,KAAKD,GAAQ,SAACE,GAAD,OAAeA,EAAEC,WAAW,UArBnE,MCOO,SAASC,EAAS3D,GACrB,MAAwCC,mBAAS,CAAEC,OAAO,EAAOC,UAAW,KAAMC,MAAO,OAAzF,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwBL,oBAAS,GAAjC,mBAAO2D,EAAP,KAAaC,EAAb,KAEMC,EAAclD,uBAAY,SAACC,EAA8BkD,GAC5C,cAAXA,GAGJF,GAAQ,KACT,IAEGlD,EAAoBC,uBAAY,SAACC,EAA2BC,GACzDD,EAAME,OAAOX,MAGdU,EAAoB,CAAEZ,OAAO,EAAOC,UAAW,KAAMC,MAAOS,EAAME,OAAOX,QAFzEU,EAAoB,CAAEZ,OAAO,EAAMC,UAAW,WAAYC,MAAO,SAItE,IAEG4D,EAAWpD,sBAAW,sBAAC,oCAAAK,EAAA,+EAEEjC,EAAWkC,KAAK,iBAAkB,CACrDC,MAAOd,EAAaD,QAHH,cAEfT,EAFe,OAKfsE,EAA4BtE,EAASsE,0BAErCC,EAPe,2BAQdD,GARc,IASjBE,UAAWxB,EAAeyB,yBAAyBH,EAA0BE,WAC7EE,KAAK,2BACEJ,EAA0BI,MAD7B,IAEAC,GAAI3B,EAAeyB,yBAAyBH,EAA0BI,KAAKC,QAZ9D,SAeMC,UAAUC,YAAYC,OAAO,CACpDC,UAAWR,IAhBM,cAefM,EAfe,OAmBfG,EAAyB,CAC3BC,oBAAqB,CACjBN,GAAIE,EAAYF,GAChBO,MAAOlC,EAAemC,oBAAoBN,EAAYK,OACtDlF,SAAU,CACNoF,kBAAmBpC,EAAemC,oBAC7BN,EAAY7E,SAAiBoF,mBAElCC,eAAgBrC,EAAemC,oBAAoBN,EAAY7E,SAASqF,mBA3B/D,UA+BQhG,EAAWkC,KAAK,eAAgByD,GA/BxC,eAiCrBd,GAAQ,GAjCa,kDAmCrBtC,QAAQrB,MAAR,MAnCqB,0DAqC1B,CAACG,EAAaD,QAEjB,OACI,sBAAKoB,UAAU,qBAAf,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,sBAAMI,aAAa,MAAnB,SACI,cAACC,EAAA,EAAD,CACIC,SAAU,SAACnB,GAAD,OAA+BF,EAAkBE,EAAOP,IAClEJ,MAAOG,EAAaH,MACpB+B,WAAY5B,EAAaF,UACzB+B,MAAM,QACNC,QAAQ,iBAIpB,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,QAASyB,EAAUxB,SAAUnC,EAAaH,MAAOiC,QAAQ,YAAYM,MAAM,UAAnF,0BAKR,cAACwC,EAAA,EAAD,CACIC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBxB,KAAMA,EACNyB,iBAAkB,IAClBC,QAASxB,EACTyB,QAAQ,0CCvFjB,IAAMjE,EAAgB,WAqBdkE,MAlBf,WACI,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAMnE,EAAb,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOmE,KATO,YASd,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC,EAAD,YCNLC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.52b76c90.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.70f9324f.svg\";","import { DEVELOPMENT, DEVELOPMENT_BASE_URL, PRODUCTION_BASE_URL } from \"../utils/constants\";\n\nexport class ApiService {\n    // Set base URL depending on environment\n    static BASE_URL = process.env.NODE_ENV === DEVELOPMENT ? DEVELOPMENT_BASE_URL : PRODUCTION_BASE_URL;\n\n    static async post(endpoint: string, body: any): Promise<any> {\n        // Default options are marked with *\n        const response = await fetch(this.BASE_URL + endpoint, {\n            method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\", // no-cors, *cors, same-origin\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n        });\n        return this.handleResponse(response);\n    }\n\n    static async handleResponse(response: Response): Promise<any> {\n        // Error HTTP status\n        if (response.status >= 400) {\n            throw await response.json();\n        } else {\n            // Success\n            return await response.json();\n        }\n    }\n}\n","export const DEVELOPMENT_BASE_URL = \"http://localhost:4000\";\nexport const PRODUCTION_BASE_URL = \"https://bros-back-end.herokuapp.com\";\nexport const DEVELOPMENT = \"development\";\nexport const PRODUCTION = \"production\";\n","import { Button, Card, CardActions, CardContent, TextField } from \"@material-ui/core\";\nimport \"./Login.scss\";\nimport logo from \"../../assets/images/logo.svg\";\nimport { BaseSyntheticEvent, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { ApiService } from \"../../services/api.service\";\nimport { useHistory } from \"react-router-dom\";\nimport { PROFILE_ROUTE } from \"../../App\";\n\nexport function Login(props: any) {\n    const [emailControl, setEmailControl] = useState({ error: false, errorText: null, value: null });\n    const [passwordControl, setPasswordControl] = useState({ error: false, errorText: null, value: null });\n    const history = useHistory();\n\n    const handleFieldChange = useCallback((event: BaseSyntheticEvent, updateStateFunction: Function) => {\n        if (!event.target.value) {\n            updateStateFunction({ error: true, errorText: \"Required\", value: null });\n        } else {\n            updateStateFunction({ error: false, errorText: null, value: event.target.value });\n        }\n    }, []);\n\n    const signIn = useCallback(async () => {\n        try {\n            await ApiService.post(\"/auth/signin\", {\n                email: emailControl.value,\n                password: passwordControl.value,\n            });\n            // Navigate to profile after successfull login\n            history.push(PROFILE_ROUTE);\n        } catch (error) {\n            console.error(error);\n        }\n    }, [emailControl.value, passwordControl.value, history]);\n\n    return (\n        <div className=\"login-component\">\n            <Card>\n                <CardContent>\n                    <div className=\"logo-wrapper\">\n                        <img src={logo} alt=\"bros and beers logo\"></img>\n                    </div>\n                    <form autoComplete=\"off\">\n                        <TextField\n                            onChange={(event: BaseSyntheticEvent) => handleFieldChange(event, setEmailControl)}\n                            error={emailControl.error}\n                            helperText={emailControl.errorText}\n                            label=\"Email\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            onChange={(event: BaseSyntheticEvent) => handleFieldChange(event, setPasswordControl)}\n                            type=\"password\"\n                            error={passwordControl.error}\n                            helperText={passwordControl.errorText}\n                            label=\"Password\"\n                            variant=\"outlined\"\n                        />\n                    </form>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        onClick={signIn}\n                        disabled={emailControl.error || passwordControl.error}\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        Sign-in\n                    </Button>\n                </CardActions>\n            </Card>\n        </div>\n    );\n}\n","import { Card, CardContent } from \"@material-ui/core\";\nimport \"./Profile.scss\";\n\nexport function Profile(props: any) {\n    return (\n        <div className=\"profile-component\">\n            <Card>\n                <CardContent>\n                    <p>This is a profile</p>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n","export class DataFormatting {\n    /**\n     * Converts an ArrayBuffer to a base64 encoded string\n     */\n    static arrayBufferToBase64(buffer: ArrayBuffer) {\n        let binary = \"\";\n        // Convert buffer to Uint8Array\n        let bytes = new Uint8Array(buffer);\n        let len = bytes.byteLength;\n        for (let i = 0; i < len; i++) {\n            // Concatenate string using char at index point provided by Uint8Array\n            binary += String.fromCharCode(bytes[i]);\n        }\n        // Return encoded string using base64\n        return window.btoa(binary);\n    }\n\n    /**\n     * Converts a string to a Uint8Array\n     */\n    static stringToUInt8ArrayBuffer(string: string): Uint8Array {\n        return Uint8Array.from(string, (c: string) => c.charCodeAt(0));\n    }\n}\n","import { Button, Card, CardActions, CardContent, Snackbar, TextField } from \"@material-ui/core\";\nimport \"./Register.scss\";\nimport { BaseSyntheticEvent, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { ApiService } from \"../../services/api.service\";\nimport { DataFormatting } from \"../../services/data-formatting.service\";\n\nexport function Register(props: any) {\n    const [emailControl, setEmailControl] = useState({ error: false, errorText: null, value: null });\n    const [open, setOpen] = useState(false);\n\n    const handleClose = useCallback((event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setOpen(false);\n    }, []);\n\n    const handleFieldChange = useCallback((event: BaseSyntheticEvent, updateStateFunction: Function) => {\n        if (!event.target.value) {\n            updateStateFunction({ error: true, errorText: \"Required\", value: null });\n        } else {\n            updateStateFunction({ error: false, errorText: null, value: event.target.value });\n        }\n    }, []);\n\n    const register = useCallback(async () => {\n        try {\n            const response = await ApiService.post(\"/auth/register\", {\n                email: emailControl.value,\n            });\n            const credentialCreationOptions = response.credentialCreationOptions;\n            // Open authenticator for credential creation\n            const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions = {\n                ...credentialCreationOptions,\n                challenge: DataFormatting.stringToUInt8ArrayBuffer(credentialCreationOptions.challenge),\n                user: {\n                    ...credentialCreationOptions.user,\n                    id: DataFormatting.stringToUInt8ArrayBuffer(credentialCreationOptions.user.id),\n                },\n            };\n            const credentials = (await navigator.credentials.create({\n                publicKey: publicKeyCredentialCreationOptions,\n            })) as PublicKeyCredential;\n            // Send public credentials to server for validation\n            const signupRequestBody: any = {\n                publicKeyCredential: {\n                    id: credentials.id,\n                    rawId: DataFormatting.arrayBufferToBase64(credentials.rawId),\n                    response: {\n                        attestationObject: DataFormatting.arrayBufferToBase64(\n                            (credentials.response as any).attestationObject\n                        ),\n                        clientDataJSON: DataFormatting.arrayBufferToBase64(credentials.response.clientDataJSON),\n                    },\n                },\n            };\n            const signupResponse = await ApiService.post(\"/auth/signup\", signupRequestBody);\n            // Open confirmation snackbar\n            setOpen(true);\n        } catch (error) {\n            console.error(error);\n        }\n    }, [emailControl.value]);\n\n    return (\n        <div className=\"register-component\">\n            <Card>\n                <CardContent>\n                    <form autoComplete=\"off\">\n                        <TextField\n                            onChange={(event: BaseSyntheticEvent) => handleFieldChange(event, setEmailControl)}\n                            error={emailControl.error}\n                            helperText={emailControl.errorText}\n                            label=\"Email\"\n                            variant=\"outlined\"\n                        />\n                    </form>\n                </CardContent>\n                <CardActions>\n                    <Button onClick={register} disabled={emailControl.error} variant=\"contained\" color=\"primary\">\n                        Sign-up\n                    </Button>\n                </CardActions>\n            </Card>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"center\",\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Biometric data sent to Kim Jong-Un\"\n            />\n        </div>\n    );\n}\n","import \"./App.scss\";\nimport { Login } from \"./components/Login/Login\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Profile } from \"./components/Profile/Profile\";\nimport { Register } from \"./components/Register/Register\";\n\nexport const PROFILE_ROUTE = \"/profile\";\nexport const REGISTER_ROUTE = \"/register\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path={PROFILE_ROUTE}>\n                    <Profile />\n                </Route>\n                <Route path={REGISTER_ROUTE}>\n                    <Register />\n                </Route>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}