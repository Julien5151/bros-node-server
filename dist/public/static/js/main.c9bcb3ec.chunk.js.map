{"version":3,"sources":["assets/images/logo.svg","services/local-storage.service.ts","services/api.service.ts","utils/constants.ts","components/Login/Login.tsx","services/user.service.ts","components/Profile/Profile.tsx","services/data-formatting.service.ts","components/Register/Register.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocalStorageService","state","this","localStorage","setItem","JSON","stringify","getItem","parse","console","error","removeItem","window","ApiService","endpoint","body","authentication","requestInit","method","mode","headers","Authorization","getState","token","fetch","BASE_URL","response","handleResponse","status","json","Login","props","useState","errorText","value","emailControl","setEmailControl","passwordControl","setPasswordControl","history","useHistory","handleFieldChange","useCallback","event","updateStateFunction","target","signIn","a","post","email","password","saveState","push","PROFILE_ROUTE","register","preventDefault","REGISTER_ROUTE","className","Card","CardContent","src","logo","alt","autoComplete","TextField","onChange","helperText","label","variant","type","Typography","Link","href","onClick","CardActions","Button","disabled","color","UserService","get","userProfile","Profile","user","setUser","useEffect","getProfile","fetchProfile","askNotificationPermissions","Notification","requestPermission","navigator","serviceWorker","ready","swReg","pushManager","getSubscription","subscribe","userVisibleOnly","applicationServerKey","newSub","log","DataFormattingService","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","btoa","string","from","c","charCodeAt","Register","open","setOpen","handleClose","reason","login","credentialCreationOptions","publicKeyCredentialCreationOptions","challenge","stringToUInt8ArrayBuffer","id","credentials","create","publicKey","signupRequestBody","publicKeyCredential","rawId","arrayBufferToBase64","attestationObject","clientDataJSON","signupResponse","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process"],"mappings":"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","file":"static/js/main.c9bcb3ec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.70f9324f.svg\";","export interface State {\n    token: string;\n}\n\nexport class LocalStorageService {\n    // Init local storage object\n    private static localStorage = window.localStorage;\n\n    /**\n     * Save state in local storage\n     */\n    static saveState(state: State): void {\n        this.localStorage.setItem(\"store\", JSON.stringify(state));\n    }\n\n    /**\n     * Retrieve state from local storage\n     */\n    static getState(): State | null {\n        // Try to get and parse state\n        try {\n            const state = this.localStorage.getItem(\"store\");\n            if (!state) {\n                console.error(\"No state found in local storage\");\n                return null;\n            } else {\n                return JSON.parse(state);\n            }\n        } catch (error) {\n            console.error(\"Parsing of state failed\");\n            return null;\n        }\n    }\n\n    /**\n     * Reset state in local storage\n     */\n    static resetState(): void {\n        // Try to get and parse state\n        this.localStorage.removeItem(\"store\");\n    }\n}\n","import { DEVELOPMENT, DEVELOPMENT_BASE_URL, PRODUCTION_BASE_URL } from \"../utils/constants\";\nimport { LocalStorageService } from \"./local-storage.service\";\n\nexport class ApiService {\n    // Set base URL depending on environment\n    static BASE_URL = process.env.NODE_ENV === DEVELOPMENT ? DEVELOPMENT_BASE_URL : PRODUCTION_BASE_URL;\n\n    static async post(endpoint: string, body: any, authentication: boolean = true): Promise<any> {\n        const requestInit: RequestInit = {\n            method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\", // no-cors, *cors, same-origin\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n        };\n        // Add authentication header\n        if (authentication) {\n            requestInit.headers = {\n                ...requestInit.headers,\n                Authorization: LocalStorageService.getState()?.token ?? \"\",\n            };\n        }\n        const response = await fetch(this.BASE_URL + endpoint, requestInit);\n        return this.handleResponse(response);\n    }\n\n    static async get(endpoint: string, authentication: boolean = true): Promise<any> {\n        const requestInit: RequestInit = {\n            method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n            mode: \"cors\", // no-cors, *cors, same-origin\n        };\n        // Add authentication header\n        if (authentication) {\n            requestInit.headers = {\n                Authorization: LocalStorageService.getState()?.token ?? \"\",\n            };\n        }\n        // Default options are marked with *\n        const response = await fetch(this.BASE_URL + endpoint, requestInit);\n        return this.handleResponse(response);\n    }\n\n    static async handleResponse(response: Response): Promise<any> {\n        // Error HTTP status\n        if (response.status >= 400) {\n            throw await response.json();\n        } else {\n            // Success\n            return await response.json();\n        }\n    }\n}\n","export const DEVELOPMENT_BASE_URL = \"http://localhost:4000\";\nexport const PRODUCTION_BASE_URL = \"https://bros-back-end.herokuapp.com\";\nexport const DEVELOPMENT = \"development\";\nexport const PRODUCTION = \"production\";\n","import { Button, Card, CardActions, CardContent, TextField, Typography, Link } from \"@material-ui/core\";\nimport \"./Login.scss\";\nimport logo from \"../../assets/images/logo.svg\";\nimport { BaseSyntheticEvent, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { ApiService } from \"../../services/api.service\";\nimport { useHistory } from \"react-router-dom\";\nimport { PROFILE_ROUTE, REGISTER_ROUTE } from \"../../App\";\nimport { LocalStorageService } from \"../../services/local-storage.service\";\n\nexport function Login(props: any) {\n    const [emailControl, setEmailControl] = useState({ error: false, errorText: null, value: null });\n    const [passwordControl, setPasswordControl] = useState({ error: false, errorText: null, value: null });\n    const history = useHistory();\n\n    const handleFieldChange = useCallback((event: BaseSyntheticEvent, updateStateFunction: Function) => {\n        if (!event.target.value) {\n            updateStateFunction({ error: true, errorText: \"Required\", value: null });\n        } else {\n            updateStateFunction({ error: false, errorText: null, value: event.target.value });\n        }\n    }, []);\n\n    const signIn = useCallback(async () => {\n        try {\n            const body = await ApiService.post(\n                \"/auth/signin\",\n                {\n                    email: emailControl.value,\n                    password: passwordControl.value,\n                },\n                false\n            );\n            // Save token in local storage\n            LocalStorageService.saveState({ token: body.token });\n            // Navigate to profile after successfull login\n            history.push(PROFILE_ROUTE);\n        } catch (error) {\n            console.error(error);\n        }\n    }, [emailControl.value, passwordControl.value, history]);\n\n    const register = useCallback(\n        (event: React.SyntheticEvent) => {\n            event.preventDefault();\n            // Navigate to profile after successfull login\n            history.push(REGISTER_ROUTE);\n        },\n        [history]\n    );\n\n    return (\n        <div className=\"login-component\">\n            <Card>\n                <CardContent>\n                    <div className=\"logo-wrapper\">\n                        <img src={logo} alt=\"bros and beers logo\"></img>\n                    </div>\n                    <form autoComplete=\"off\">\n                        <TextField\n                            onChange={(event: BaseSyntheticEvent) => handleFieldChange(event, setEmailControl)}\n                            error={emailControl.error}\n                            helperText={emailControl.errorText}\n                            label=\"Email\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            onChange={(event: BaseSyntheticEvent) => handleFieldChange(event, setPasswordControl)}\n                            type=\"password\"\n                            error={passwordControl.error}\n                            helperText={passwordControl.errorText}\n                            label=\"Password\"\n                            variant=\"outlined\"\n                        />\n                        <Typography>\n                            Don't have an account ?\n                            <span className=\"register-link\">\n                                <Link href=\"#\" onClick={register}>\n                                    Register now !\n                                </Link>\n                            </span>\n                        </Typography>\n                    </form>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        onClick={signIn}\n                        disabled={emailControl.error || passwordControl.error}\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        Login\n                    </Button>\n                </CardActions>\n            </Card>\n        </div>\n    );\n}\n","import { ApiService } from \"./api.service\";\n\nexport interface User {\n    // Mandatory properties\n    firstName: string;\n    lastName: string;\n    email: string;\n    zipcode: number;\n    // Optional properties\n    _id: string;\n    createdAt: Date;\n    phone: string | null;\n    address: string | null;\n    groupId: string | null;\n    availableForGrouping: boolean;\n}\n\nexport class UserService {\n    /**\n     * Retrieve user profile\n     */\n    static async getProfile(): Promise<User> {\n        // Get user profile\n        const userProfile = await ApiService.get(\"/profile\");\n        return userProfile as User;\n    }\n}\n","import { Button, Card, CardContent } from \"@material-ui/core\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { User, UserService } from \"../../services/user.service\";\nimport { ApiService } from \"../../services/api.service\";\nimport \"./Profile.scss\";\n\nexport function Profile(props: any) {\n    const [user, setUser] = useState<User>();\n\n    useEffect(() => {\n        if (!user) {\n            const fetchProfile = async () => {\n                const user = await UserService.getProfile();\n                setUser(user);\n            };\n            fetchProfile();\n        }\n    });\n\n    const askNotificationPermissions = useCallback(async () => {\n        const result = await Notification.requestPermission();\n        if (result === \"granted\") {\n            // Setup SW push notification subscription\n            const swReg = await navigator.serviceWorker.ready;\n            const pushSub = await swReg.pushManager.getSubscription();\n            if (!pushSub) {\n                // Create new subscription\n                const vapidPublicKey =\n                    \"BPUUeqOwwaXk7DEMrQyE4de6BORpvyYus0RS0hs5iwJHEcRcelf0CxM6xKMt3IBSakymvGJ3sSEEZXLvpZnmye4\";\n                //const convertedKey = DataFormattingService.stringToUInt8ArrayBuffer(vapidPublicKey);\n                const newSub = await swReg.pushManager.subscribe({\n                    userVisibleOnly: true,\n                    applicationServerKey: vapidPublicKey,\n                });\n                // Send new sub to backend\n                const response = await ApiService.post(\"/subscriptions\", newSub);\n                console.log(response);\n            } else {\n                // We already have a subscription\n            }\n        }\n    }, []);\n\n    return (\n        <div className=\"profile-component\">\n            <Card>\n                <CardContent>\n                    <p>This is a profile</p>\n                    <Button onClick={askNotificationPermissions} variant=\"contained\" color=\"primary\">\n                        Permissions\n                    </Button>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n","export class DataFormattingService {\n    /**\n     * Converts an ArrayBuffer to a base64 encoded string\n     */\n    static arrayBufferToBase64(buffer: ArrayBuffer) {\n        let binary = \"\";\n        // Convert buffer to Uint8Array\n        let bytes = new Uint8Array(buffer);\n        let len = bytes.byteLength;\n        for (let i = 0; i < len; i++) {\n            // Concatenate string using char at index point provided by Uint8Array\n            binary += String.fromCharCode(bytes[i]);\n        }\n        // Return encoded string using base64\n        return window.btoa(binary);\n    }\n\n    /**\n     * Converts a string to a Uint8Array\n     */\n    static stringToUInt8ArrayBuffer(string: string): Uint8Array {\n        return Uint8Array.from(string, (c: string) => c.charCodeAt(0));\n    }\n}\n","import { Button, Card, CardActions, CardContent, Link, Snackbar, TextField, Typography } from \"@material-ui/core\";\nimport \"./Register.scss\";\nimport { BaseSyntheticEvent, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { ApiService } from \"../../services/api.service\";\nimport { useHistory } from \"react-router\";\nimport logo from \"../../assets/images/logo.svg\";\nimport { DataFormattingService } from \"../../services/data-formatting.service\";\n\nexport function Register(props: any) {\n    const [emailControl, setEmailControl] = useState({ error: false, errorText: null, value: null });\n    const [open, setOpen] = useState(false);\n    const history = useHistory();\n\n    const handleClose = useCallback((event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setOpen(false);\n    }, []);\n\n    const handleFieldChange = useCallback((event: BaseSyntheticEvent, updateStateFunction: Function) => {\n        if (!event.target.value) {\n            updateStateFunction({ error: true, errorText: \"Required\", value: null });\n        } else {\n            updateStateFunction({ error: false, errorText: null, value: event.target.value });\n        }\n    }, []);\n\n    const login = useCallback(\n        (event: React.SyntheticEvent) => {\n            event.preventDefault();\n            // Navigate to profile after successfull login\n            history.push(\"\");\n        },\n        [history]\n    );\n\n    const register = useCallback(async () => {\n        try {\n            const response = await ApiService.post(\"/auth/register\", {\n                email: emailControl.value,\n            });\n            const credentialCreationOptions = response.credentialCreationOptions;\n            // Open authenticator for credential creation\n            const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions = {\n                ...credentialCreationOptions,\n                challenge: DataFormattingService.stringToUInt8ArrayBuffer(credentialCreationOptions.challenge),\n                user: {\n                    ...credentialCreationOptions.user,\n                    id: DataFormattingService.stringToUInt8ArrayBuffer(credentialCreationOptions.user.id),\n                },\n            };\n            const credentials = (await navigator.credentials.create({\n                publicKey: publicKeyCredentialCreationOptions,\n            })) as PublicKeyCredential;\n            // Send public credentials to server for validation\n            const signupRequestBody: any = {\n                publicKeyCredential: {\n                    id: credentials.id,\n                    rawId: DataFormattingService.arrayBufferToBase64(credentials.rawId),\n                    response: {\n                        attestationObject: DataFormattingService.arrayBufferToBase64(\n                            (credentials.response as any).attestationObject\n                        ),\n                        clientDataJSON: DataFormattingService.arrayBufferToBase64(credentials.response.clientDataJSON),\n                    },\n                },\n            };\n            const signupResponse = await ApiService.post(\"/auth/signup\", signupRequestBody);\n            console.log(signupResponse);\n            // Open confirmation snackbar\n            setOpen(true);\n        } catch (error) {\n            console.error(error);\n        }\n    }, [emailControl.value]);\n\n    return (\n        <div className=\"register-component\">\n            <Card>\n                <CardContent>\n                    <div className=\"logo-wrapper\">\n                        <img src={logo} alt=\"bros and beers logo\"></img>\n                    </div>\n                    <form autoComplete=\"off\">\n                        <TextField\n                            onChange={(event: BaseSyntheticEvent) => handleFieldChange(event, setEmailControl)}\n                            error={emailControl.error}\n                            helperText={emailControl.errorText}\n                            label=\"Email\"\n                            variant=\"outlined\"\n                        />\n                        <Typography>\n                            Already have an account ?\n                            <span className=\"register-link\">\n                                <Link href=\"#\" onClick={login}>\n                                    Login now !\n                                </Link>\n                            </span>\n                        </Typography>\n                    </form>\n                </CardContent>\n                <CardActions>\n                    <Button onClick={register} disabled={emailControl.error} variant=\"contained\" color=\"primary\">\n                        Register\n                    </Button>\n                </CardActions>\n            </Card>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"center\",\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Biometric data sent to Kim Jong-Un\"\n            />\n        </div>\n    );\n}\n","import \"./App.scss\";\nimport { Login } from \"./components/Login/Login\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Profile } from \"./components/Profile/Profile\";\nimport { Register } from \"./components/Register/Register\";\n\nexport const PROFILE_ROUTE = \"/profile\";\nexport const REGISTER_ROUTE = \"/register\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path={PROFILE_ROUTE}>\n                    <Profile />\n                </Route>\n                <Route path={REGISTER_ROUTE}>\n                    <Register />\n                </Route>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// Register web worker\nif (navigator.serviceWorker) {\n    navigator.serviceWorker.register(`${process.env.PUBLIC_URL}/service-worker.js`);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}